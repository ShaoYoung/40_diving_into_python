# Задание №7
# ✔ Пользователь вводит строку текста.
# ✔ Подсчитайте сколько раз встречается каждая буква в строке без использования метода count и с ним.
# ✔ Результат сохраните в словаре, где ключ — символ, а значение — частота встречи символа в строке.
# ✔ Обратите внимание на порядок ключей.
# Объясните почему они совпадают или не совпадают в ваших решениях.

# Частотный словарь
user_str = input('Напечатайте что-нибудь: ')
# для теста без ввода текста
# user_str = 'Откройте желанную групповую переписку (или следуйте предыдущим шагам) и нажмите на иконку звонка, чтобы позвонить всем в группе. Когда Ваши товарищи присоединятся к звонку, Вы увидите их аватарки перестанут мигать и начнут гореть зеленым цветом, подтверждая их голосовую активность.'
user_str = user_str.lower()
freq_dict = {}
for item in user_str:
    if item.isalpha():
        freq_dict.setdefault(item, 0)
        freq_dict[item] += 1
# порядок ключей соответствует порядку их добавления в словарь
print(f'{freq_dict=}')
# сортируем частотный словарь по ключу (в алфавитном порядке)
freq_dict_sorted_by_keys = dict(sorted(freq_dict.items()))
print(f'{freq_dict_sorted_by_keys=}')
# сортируем частотный словарь по значению (частоте упоминания в строке текста), по убыванию. Ключ - значение (tuple[1]).
freq_dict_sorted_by_values = dict(sorted(freq_dict.items(), key=lambda item: item[1], reverse=True))
print(f'{freq_dict_sorted_by_values=}')

# Функция sorted возвращает новый отсортированный список, который получен из итерируемого объекта, который был передан как аргумент.
# С помощью параметра key можно указывать, как именно выполнять сортировку. Параметр key ожидает функцию, с помощью которой должно быть выполнено сравнение.
# С помощью параметра key можно сортировать объекты не по первому элементу, а по любому другому. Но для этого надо использовать или функцию lambda, или специальные функции из модуля operator.
