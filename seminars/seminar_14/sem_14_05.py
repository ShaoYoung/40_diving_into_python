# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, —Ö—Ä–∞–Ω—è—â–∏–π –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É, –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä,
# –ø–ª–æ—â–∞–¥—å –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.

import unittest
from rectangle import Rectangle


class TestRectangle(unittest.TestCase):
    def setUp(self) -> None:
        self.rec_1 = Rectangle(5)
        self.rec_2 = Rectangle(6)
        self.rec_3 = self.rec_1 + self.rec_2
        self.rec_4 = self.rec_1 - self.rec_2

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    def test_create(self):
        self.assertIsInstance(self.rec_1, Rectangle)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
    def test_perimeter(self):
        self.assertEqual(self.rec_1.get_perimeter(), 20)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∏
    def test_area(self):
        self.assertEqual(self.rec_1.get_square(), 25)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    def test_not_equal(self):
        self.assertFalse(self.rec_1 == self.rec_2)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    def test_type_argument(self):
        with self.assertRaises(TypeError):
            Rectangle('5') + Rectangle('6')

    def test_add(self):
        self.assertTrue(self.rec_1 + self.rec_2 == self.rec_3 )

    def test_add_2(self):
        self.assertEqual(self.rec_1 + self.rec_2, self.rec_3)

    def test_sub(self):
        self.assertTrue(self.rec_1 - self.rec_2 == self.rec_4 )


if __name__ == '__main__':
    unittest.main(verbosity=2)
