# üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –µ—ë –∏ –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ —Ñ–∞–π–ª—ã json, csv –∏ pickle.
# ‚óã –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
# ‚óã –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —ç—Ç–æ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
# ‚óã –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö, –∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –≤ –Ω–µ–π —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.

#  samodurOFF yesterday (30.06.2023)
# –ß—Ç–æ-—Ç–æ —Å–ª–æ–∂–Ω–æ. –ö–∞–∫ —è –≥–æ–≤–æ—Ä–∏–ª –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ, –ª—É—á—à–µ —Å–æ–∑–¥–∞—Ç—å json —Å—É—â–Ω–æ—Å—Ç—å –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–∞–∫ –≤ —Å—Ç—Ä–æ–∫—É pickle, —Ç–∞–∫ –∏ –≤ —Ñ–∞–π–ª csv.
# –ü—Ä–∏ —ç—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∞—è.
#
# {
#       'obj': <–∏–º—è –æ–±—ä–µ–∫—Ç–∞>,
#       'parent': <–∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è>,
#       'obj_type': <—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞(–ø–∞–ø–∫–∞ –∏–ª–∏ —Ñ–∞–π–ª)>,
#       'size': <—Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞>,
# }
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–π —Å–ª–æ–≤–∞—Ä—å –∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤—Å–µ—Ö –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å–µ–≥–æ —Ç–æ –∏ –Ω—É–∂–Ω–æ, —á—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–Ω–∞—á–∞–ª–∞ –≤ —Ñ–∞–π–ª json, –∞ –ø–æ—Ç–æ–º —Ñ–∞–π–ª pickle. –ü–æ—Ç–æ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–ª–∞—Å—Å–∞ DictWriter –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª csv. –í –≤–æ—Ç –∏ –≤—Å—ë.
# –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç –µ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
#
# def save_to_files(data):
#     with (
#         open('data.json', 'w', encoding='utf-8') as json_f,
#         open('data.csv', 'w', newline='', encoding='utf-8') as csv_f,
#         open('data.pickle', 'wb') as pickle_f,
#     ):
#         json.dump(data, json_f, indent=4, ensure_ascii=False)
#         pickle.dump(data, pickle_f)
#
#         csv_write = csv.DictWriter(csv_f, fieldnames=[*data[0]])
#         csv_write.writeheader()
#         csv_write.writerows(data)

import os
import json
import csv
import pickle
import pandas


def recursion_folder(folder, json_filename, csv_filename, pickle_filename):
    # –æ–±—Ö–æ–¥–∏–º —Å –Ω–∏–∂–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    tree_list = os.walk(folder, topdown=False)
    tree = {}
    sub_tree = {}
    prev_path_len = 0
    min_path_len = 0
    for path, folders, files in tree_list:
        print(f'{path = } ___ {folders = } ___ {files = }')

        # —Å–ª–æ–≤–∞—Ä—å —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        files_in_folder = {file: f'{os.stat(os.path.join(path, file)).st_size} bytes' for file in files}
        file_sizes = 0
        for file in files_in_folder:
            file_sizes += os.stat(os.path.join(path, file)).st_size
            print(f'{file} - {os.stat(os.path.join(path, file)).st_size}')

        last_folder = path.rsplit('\\', 1)[-1]
        # print(f'{last_folder = }')
        upper_folder = path.rsplit('\\', 2)[-2]
        # upper_folders.add(upper_folder)
        # print(f'{upper_folders = } ___ {upper_folder = } ___ {last_folder = }')
        print(f'{upper_folder = } ___ {last_folder = }')

        path_len = len(path.split('\\'))
        print(f'{path_len = } ___ {prev_path_len = } ___ {min_path_len = }')

        if prev_path_len and prev_path_len < path_len:
            print('–°—É–±–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è')
            sub_tree.update({upper_folder: {last_folder: files_in_folder}})
        elif prev_path_len and path_len < min_path_len:
            print('–ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ')

            for file, filesize in files_in_folder.items():
                sub_tree.update({file: filesize})

            if sub_tree:
                tree.update({last_folder: sub_tree.copy()})
                print(f'{tree = } ___ {sub_tree = } ___ {files_in_folder = }')
                sub_tree.clear()
            else:
                print(f'{sub_tree = } –ø—É—Å—Ç–æ–π')
                tree_copy = tree.copy()
                tree.clear()
                print(f'{last_folder = }')
                tree.update({last_folder: tree_copy})

            print(f'{tree = }')

        else:
            if last_folder in sub_tree.keys():
                print(f'–ö–ª—é—á {last_folder} —É–∂–µ –µ—Å—Ç—å')
                sub_tree[last_folder].update(files_in_folder)
            else:
                sub_tree.update({last_folder: files_in_folder})
        print(f'{sub_tree = }')

        min_path_len = min(path_len, prev_path_len)
        prev_path_len = path_len

        print()

    print("–î–µ—Ä–µ–≤–æ:")
    print(f'\n{tree = }')

    with(
        open(pickle_filename, "wb") as pickle_f,
        open(json_filename, 'w', encoding='utf-8') as json_f
    ):
        json.dump(tree, json_f)
        pickle.dump(tree, pickle_f)

        df = pandas.DataFrame(tree)
        df.to_csv(csv_filename)
        # dict_keys = tree.keys()
        # csv_write = csv.DictWriter(csv_f, fieldnames=dict_keys)
        # csv_write.writeheader()
        # csv_write.writerows(tree)


if __name__ == '__main__':
    # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π
    # folder = os.path.abspath('..\\..')
    # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π
    # folder = os.path.abspath('..\\')
    # folder = os.getcwd()
    # –ø–∞–ø–∫–∞ test
    json_filename = 'hw_08_01.json'
    csv_filename = 'hw_08_01.csv'
    pickle_filename = 'hw_08_01.pickle'
    folder = os.path.join(os.getcwd(), 'test')
    print(f'{folder = }')
    recursion_folder(folder, json_filename, csv_filename, pickle_filename)
