# –ó–∞–¥–∞–Ω–∏–µ
# üìå –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Ä–µ—à–∏—Ç—å –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# ‚óã –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è
# ‚óã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è csv —Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–º—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ. 100-1000 —Å—Ç—Ä–æ–∫.
# ‚óã –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∫–∞–∂–¥–æ–π —Ç—Ä–æ–π–∫–æ–π —á–∏—Å–µ–ª –∏–∑ csv —Ñ–∞–π–ª–∞.
# ‚óã –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤ json —Ñ–∞–π–ª.
# üìå –°–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å –∏–≥—Ä–∞–º–∏ –∏–∑ —Ç–µ—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ —É–∂–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞


import json
import csv
import os
from random import randint
from functools import wraps

MIN_QUANTITY = 100
MAX_QUANTITY = 1000
MAX_NUMBER_ABS = 100


def generator_csv():
    equ_quantity = randint(MIN_QUANTITY, MAX_QUANTITY)
    # –¥–ª—è —Ç–µ—Å—Ç–∞
    # equ_quantity = 2
    # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç—Ä–æ–µ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    triple_list = [[randint(-MAX_NUMBER_ABS, MAX_NUMBER_ABS), randint(-MAX_NUMBER_ABS, MAX_NUMBER_ABS),
                    randint(-MAX_NUMBER_ABS, MAX_NUMBER_ABS)] for _ in range(equ_quantity)]
    # print(triple_list)
    filename = 'triple_list.csv'
    with open(filename, 'w', newline='') as f_csv:
        csv_write = csv.writer(f_csv)
        csv_write.writerows(triple_list)


def triple_from_csv(func):
    def wrapper():
        file_csv = 'triple_list.csv'
        with open(file_csv, 'r', newline='') as f_csv:
            csv_read = csv.reader(f_csv, quoting=csv.QUOTE_NONNUMERIC)
            for a, b, c in csv_read:
                # –µ—Å–ª–∏ a –Ω–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é (–∏–Ω–∞—á–µ –±—É–¥–µ—Ç –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å)
                if a:
                    func(a, b, c)
                else:
                    print(f'{a = }, –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è!')

    return wrapper


def save_to_json(func):
    @wraps(func)
    def wrapper(*args):
        file_json = f'{func.__name__}.json'
        if os.path.exists(file_json):
            with open(file_json, 'r', encoding='utf-8') as fj:
                list_file = json.load(fj)
        else:
            list_file = []
        a, b, c = args
        result = func(a, b, c)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∫–æ—Ä–Ω–∏. –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞, —Ç.–∫. json –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
        if isinstance(result[0], complex):
            result = f'–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π –Ω–µ—Ç. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∫–æ—Ä–Ω–∏ {result}'
        list_file.append({
            '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã': {
                'a': int(a),
                'b': int(b),
                'c': int(c)
            },
            '–∫–æ—Ä–Ω–∏': result
        })
        file_json = f'{func.__name__}.json'
        with open(file_json, 'w', encoding='utf-8') as f_json:
            json.dump(list_file, f_json, indent=1, ensure_ascii=False)

    return wrapper


@triple_from_csv
@save_to_json
def find_roots(a=0, b=0, c=1):
    d = b ** 2 - 4 * a * c
    # print(f'–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç = {d}')
    x_1 = (-b + pow(d, 0.5)) / (2 * a)
    x_2 = (-b - pow(d, 0.5)) / (2 * a)
    # print(f'–ö–æ—Ä–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è {x_1}, {x_2}')
    return (x_1, x_2)


if __name__ == '__main__':
    generator_csv()
    find_roots()
