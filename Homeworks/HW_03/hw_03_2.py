# В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
# Не учитывать знаки препинания и регистр символов. За основу возьмите любую статью
# из википедии или из документации к языку.
import string

text = 'Футбол. Краткие правила игры. Есть 17 официальных правил игры, каждое из которых содержит список оговорок и руководящих принципов.' \
       ' Эти правила предназначены для применения на всех уровнях футбола, хотя есть некоторые изменения для таких групп, как юниоры, взрослые,' \
       ' женщины и люди с ограниченными физическими возможностями. Законы очень часто формулировались в общих чертах, которые позволяют упростить их применения' \
       ' в зависимости от характера игры. Правила игры публикуются в ФИФА, но поддерживаются Международным советом футбольных ассоциаций.' \
       ' Каждая команда состоит максимум из одиннадцати игроков (без учета запасных), один из которых должен быть вратарём.' \
       ' Правила неофициальных соревнований могут уменьшить количество игроков, максимум до 7. Вратари являются единственными игроками,' \
       ' которым позволено играть руками при условии: они делают это в пределах штрафной площади у своих собственных ворот.' \
       'Хотя есть различные позиции на поле, эти позиции не обязательны. Отдельная футбольная игра называется матч, который в свою очередь состоит из двух таймов по 45 минут. ' \
       'Пауза между первым и вторым таймами составляет 15 минут, в течение которой команды отдыхают, а по её окончании меняются воротами.' \
       ' Цель игры - забить мяч в ворота противника, сделать это как можно большее количество раз и постараться не допустить гола в свои ворота.' \
       'Матч выигрывает команда, забившая большее количество голов. В случае, если в течение двух таймов команды забили одинаковое количество голов,' \
       ' то или фиксируется ничья, или победитель выявляется согласно установленному регламенту матча. ' \
       'В этом случае может быть назначено дополнительное время - ещё два тайма по 15 минут каждый. ' \
       'Как правило, между основным и дополнительным временем матча командам предоставляется перерыв. ' \
       'Между дополнительными таймами командам даётся лишь время на смену сторон. ' \
       'Одно время в футболе существовало правило, по которому победителем объявлялась команда, первой забившая гол (правило "золотого гола") ' \
       'или выигрывавшая по окончании любого из дополнительных таймов (правило "серебряного гола"). ' \
       'В настоящий момент дополнительное время либо не играется вовсе, либо играется в полном объёме (2 тайма по 15 минут). ' \
       'Если в течение дополнительного времени победителя выявить не удаётся, проводится серия послематчевых пенальти, не являющихся частью матча: ' \
       'по воротам противника с расстояния 11 метров пробивается по пять ударов разными игроками. ' \
       'Если количество забитых пенальти у обеих команд будет равным, тогда пробиваются по одной паре пенальти, пока не будет выявлен победитель. ' \
       'Матчи могут проводиться как на полях с естественным, так и на полях с искусственным покрытием. ' \
       'Согласно официальным правилам игры в футбол искусственное покрытие должно быть зелёного цвета. ' \
       'Поле для игры имеет форму прямоугольника. Боковая линия обязательно должна быть длиннее линии ворот. ' \
       'Принималось решение о том, что размер поля должен составлять 100-110 м (110-120 ярдов) в длину и минимум 64-75 (70-80 ярдов) в ширину, ' \
       'однако затем обязательность этого требования была приостановлена.'
# знаки, исключаемые из текста
# punctuation - знаки пунктуации, digits - цифры
SIGNS = string.punctuation + string.digits
# количество самых частых
TOP = 10
# удаляем знаки и приводим к нижнему регистру
for sign in SIGNS:
    text = text.replace(sign, '')
text = text.lower()
# разбиваем по пробелу
words_list = text.split()
# делаем частотный словарь
freq_dict = {}
for word in words_list:
    # не работает, т.к. ключа может ещё не быть
    # freq_dict[word] += freq_dict.get(word, 0) + 1
    freq_dict.setdefault(word, 0)
    freq_dict[word] += 1
# # сортируем по значению, по убыванию
# freq_dict = dict(sorted(freq_dict.items(), key=lambda word: word[1], reverse=True))
#
# # печатаем первые TOP
# for i, item in enumerate(freq_dict.items(), 1):
#     if i > TOP:
#         break
#     else:
#         print(i, item)
# Вариант Данила (выводит список)
freq_dict = sorted(freq_dict, key=lambda word: freq_dict [word], reverse=True)[:TOP]
print(freq_dict)

